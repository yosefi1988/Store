// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplicationStore.Models.Contexts;

#nullable disable

namespace WebApplicationStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240808123652_updateuser")]
    partial class updateuser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplicationStore.Models.Metadata.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Company")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("employees");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdCity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("BdCity");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdCountry");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdPaymentStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdPaymentStatusType");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendBoxPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("BdSendBoxPrice");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendProductsPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("StateId");

                    b.ToTable("BdSendProductsPrice");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendStatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdSendStatusType");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdShoppingBasketType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdShoppingBasketType");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSizeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdSizeType");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("BdState");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxPercentage")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BdTax");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.ScAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("ScAdmin");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserId1");

                    b.ToTable("SdAddress");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SdCategory");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SdColor");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdCoupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CouponPercent")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxRialValue")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SdCoupon");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductChargePropertiesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductChargePropertiesId");

                    b.ToTable("SdImage");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SdProduct");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("SdProductCategory");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductCharge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BuyCount")
                        .HasColumnType("int");

                    b.Property<string>("BuyInvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuyPrice")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Idddl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PercentInterest")
                        .HasColumnType("int");

                    b.Property<int?>("PercentWages")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("SaleTaxId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SaleTaxId");

                    b.ToTable("SdProductCharge");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<int?>("Discount")
                        .HasColumnType("int");

                    b.Property<int?>("ProductChargeId")
                        .HasColumnType("int");

                    b.Property<int?>("RemainingCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductChargeId");

                    b.ToTable("SdProductChargesProperty");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductChargePropertiesId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductChargePropertiesId");

                    b.HasIndex("SizeId");

                    b.ToTable("SdProductSize");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdSendBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SendPriceId")
                        .HasColumnType("int");

                    b.Property<int?>("SendStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SendTrackingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendTypeTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShoppingBasketId")
                        .HasColumnType("int");

                    b.Property<int?>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SendPriceId");

                    b.HasIndex("SendStatusId");

                    b.HasIndex("ShoppingBasketId");

                    b.HasIndex("TransactionId");

                    b.ToTable("SdSendBox");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId1");

                    b.ToTable("SdShoppingBasket");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdShoppingBasketObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("AddDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<int?>("OldPrice")
                        .HasColumnType("int");

                    b.Property<int?>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ProductChargePropertiesId")
                        .HasColumnType("int");

                    b.Property<int>("ShoppingBasketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductChargePropertiesId");

                    b.HasIndex("ShoppingBasketId");

                    b.ToTable("SdShoppingBasketObject");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AmountForPay")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<int?>("DiscountCodeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentTrackingNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SendAmount")
                        .HasColumnType("int");

                    b.Property<int?>("ShoppingBasketId")
                        .HasColumnType("int");

                    b.Property<int?>("SumShoppingBasketDiscount")
                        .HasColumnType("int");

                    b.Property<int?>("SumShoppingBasketPrice")
                        .HasColumnType("int");

                    b.Property<int?>("SumTaxAmount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiscountCodeId");

                    b.HasIndex("PaymentStatusId");

                    b.HasIndex("ShoppingBasketId");

                    b.ToTable("SdTransaction");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Family")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductChargePropertiesId")
                        .HasColumnType("int");

                    b.Property<byte?>("Star")
                        .HasColumnType("tinyint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ProductChargePropertiesId");

                    b.HasIndex("UserId1");

                    b.ToTable("SdVote");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdCity", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdState", "State")
                        .WithMany("BdCities")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendBoxPrice", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdState", "State")
                        .WithMany("BdSendBoxPrices")
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendProductsPrice", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProduct", "Product")
                        .WithMany("BdSendProductsPrices")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdState", "State")
                        .WithMany("BdSendProductsPrices")
                        .HasForeignKey("StateId");

                    b.Navigation("Product");

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdState", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdCountry", "Country")
                        .WithMany("BdStates")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.ScAdmin", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", "User")
                        .WithMany("ScAdmins")
                        .HasForeignKey("UserId1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdAddress", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdCity", "City")
                        .WithMany("SdAddresses")
                        .HasForeignKey("CityId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", "User")
                        .WithMany("SdAddresses")
                        .HasForeignKey("UserId1");

                    b.Navigation("City");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdImage", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", "ProductChargeProperties")
                        .WithMany("SdImages")
                        .HasForeignKey("ProductChargePropertiesId");

                    b.Navigation("ProductChargeProperties");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductCategory", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdCategory", "Category")
                        .WithMany("SdProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProduct", "Product")
                        .WithMany("SdProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductCharge", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProduct", "Product")
                        .WithMany("SdProductCharges")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdTax", "SaleTax")
                        .WithMany("SdProductCharges")
                        .HasForeignKey("SaleTaxId");

                    b.Navigation("Product");

                    b.Navigation("SaleTax");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdColor", "Color")
                        .WithMany("SdProductChargesProperties")
                        .HasForeignKey("ColorId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProductCharge", "ProductCharge")
                        .WithMany("SdProductChargesProperties")
                        .HasForeignKey("ProductChargeId");

                    b.Navigation("Color");

                    b.Navigation("ProductCharge");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductSize", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", "ProductChargeProperties")
                        .WithMany("SdProductSizes")
                        .HasForeignKey("ProductChargePropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdSizeType", "Size")
                        .WithMany("SdProductSizes")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductChargeProperties");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdSendBox", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdCity", "City")
                        .WithMany("SdSendBoxes")
                        .HasForeignKey("CityId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdSendBoxPrice", "SendPrice")
                        .WithMany("SdSendBoxes")
                        .HasForeignKey("SendPriceId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdSendStatusType", "SendStatus")
                        .WithMany("SdSendBoxes")
                        .HasForeignKey("SendStatusId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", "ShoppingBasket")
                        .WithMany("SdSendBoxes")
                        .HasForeignKey("ShoppingBasketId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdTransaction", "Transaction")
                        .WithMany("SdSendBoxes")
                        .HasForeignKey("TransactionId");

                    b.Navigation("City");

                    b.Navigation("SendPrice");

                    b.Navigation("SendStatus");

                    b.Navigation("ShoppingBasket");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdShoppingBasketType", "Status")
                        .WithMany("SdShoppingBaskets")
                        .HasForeignKey("StatusId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", "User")
                        .WithMany("SdShoppingBaskets")
                        .HasForeignKey("UserId1");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdShoppingBasketObject", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", "ProductChargeProperties")
                        .WithMany("SdShoppingBasketObjects")
                        .HasForeignKey("ProductChargePropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", "ShoppingBasket")
                        .WithMany("SdShoppingBasketObjects")
                        .HasForeignKey("ShoppingBasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductChargeProperties");

                    b.Navigation("ShoppingBasket");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdTransaction", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdCoupon", "DiscountCode")
                        .WithMany("SdTransactions")
                        .HasForeignKey("DiscountCodeId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.BdPaymentStatusType", "PaymentStatus")
                        .WithMany("SdTransactions")
                        .HasForeignKey("PaymentStatusId");

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", "ShoppingBasket")
                        .WithMany("SdTransactions")
                        .HasForeignKey("ShoppingBasketId");

                    b.Navigation("DiscountCode");

                    b.Navigation("PaymentStatus");

                    b.Navigation("ShoppingBasket");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdVote", b =>
                {
                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", "ProductChargeProperties")
                        .WithMany("SdVotes")
                        .HasForeignKey("ProductChargePropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplicationStore.Models.StoreDbModels.SdUser", "User")
                        .WithMany("SdVotes")
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductChargeProperties");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdCity", b =>
                {
                    b.Navigation("SdAddresses");

                    b.Navigation("SdSendBoxes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdCountry", b =>
                {
                    b.Navigation("BdStates");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdPaymentStatusType", b =>
                {
                    b.Navigation("SdTransactions");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendBoxPrice", b =>
                {
                    b.Navigation("SdSendBoxes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSendStatusType", b =>
                {
                    b.Navigation("SdSendBoxes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdShoppingBasketType", b =>
                {
                    b.Navigation("SdShoppingBaskets");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdSizeType", b =>
                {
                    b.Navigation("SdProductSizes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdState", b =>
                {
                    b.Navigation("BdCities");

                    b.Navigation("BdSendBoxPrices");

                    b.Navigation("BdSendProductsPrices");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.BdTax", b =>
                {
                    b.Navigation("SdProductCharges");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdCategory", b =>
                {
                    b.Navigation("SdProductCategories");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdColor", b =>
                {
                    b.Navigation("SdProductChargesProperties");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdCoupon", b =>
                {
                    b.Navigation("SdTransactions");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProduct", b =>
                {
                    b.Navigation("BdSendProductsPrices");

                    b.Navigation("SdProductCategories");

                    b.Navigation("SdProductCharges");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductCharge", b =>
                {
                    b.Navigation("SdProductChargesProperties");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdProductChargesProperty", b =>
                {
                    b.Navigation("SdImages");

                    b.Navigation("SdProductSizes");

                    b.Navigation("SdShoppingBasketObjects");

                    b.Navigation("SdVotes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdShoppingBasket", b =>
                {
                    b.Navigation("SdSendBoxes");

                    b.Navigation("SdShoppingBasketObjects");

                    b.Navigation("SdTransactions");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdTransaction", b =>
                {
                    b.Navigation("SdSendBoxes");
                });

            modelBuilder.Entity("WebApplicationStore.Models.StoreDbModels.SdUser", b =>
                {
                    b.Navigation("ScAdmins");

                    b.Navigation("SdAddresses");

                    b.Navigation("SdShoppingBaskets");

                    b.Navigation("SdVotes");
                });
#pragma warning restore 612, 618
        }
    }
}
